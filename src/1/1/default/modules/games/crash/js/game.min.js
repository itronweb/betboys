Number.prototype.toPrice = function (unit, multiplier) {
  if (multiplier === undefined) multiplier = 1;
  let val = (this.valueOf() * multiplier).toString().split('.'), price = val[0], change = val[1],
    i = price.length % 3,
    priceNew = i ? ' ' + price.substr(0, i) : '';
  for (; i < price.length; i += 3) priceNew += ',' + price.substr(i, 3);
  return (priceNew ? priceNew.substr(1) : 0) + (change ? '.' + change.substr(0, 3) : '');
};
var userLang = navigator['language'] || navigator['userLanguage'],
  language, game_assets, user_data = new Object,
  game_data = new Object({
    status: 'null',
    cashin: !1,
    amount: 0,
    cashout: 0,
    winners: [],
    players: [],
    autoplay: !1
  }),
  top_winners = [],
  last_winners = [],
  last_winners_bussy = !1,
  screen_size = new Object,
  socket_connection, active_screen = '',
  mute_audios = !1;
if (void (0) === debug_level) {
  var debug_level = 0
}
;

function getCookie(cname) {
  var name = cname + "=";
  var decodedCookie = decodeURIComponent(document.cookie);
  var ca = decodedCookie.split(';');
  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
}

data_from_socket = function (response) {
  var data = null != response['command'] ? response['command'] : '';
  'auth' == data && game_auth(response),
  'game_status' == data && game_status(response),
  'cash_out' == data && game_cash_out(response),
  'error' == data && game_error(response),
  'broadcast' == data && game_broadcast(response),
  'last_win' == data && game_last_win(response),
  'waiting' == data && game_waiting(response),
  'started' == data && game_started(response),
  'update' == data && game_update(response),
  'busted' == data && game_busted(response),
  'chips' == data && game_chips(response),
  'credit' == data && game_credit(response),
  'chat' == data && game_chat(response),
  'play' == data && game_play(response),
  'finish' == data && game_finish(response),
  'cancel' == data && game_cancel(response),
  'mute' == data && game_mute(response),
  'top_winners' == data && game_top_winners(response)

}, game_play = function (response) {

  user_data['uid'] == response['uid'] && (
    game_data['cashin'] = !0,
      game_data['amount'] = response['amount'],
      game_data['cashout'] = response['cashout'],
      $('.game-amount')['val'](chip_format_no_symbol(game_data['amount'].toPrice())),
      $('.cashout-amount')['val']((game_data['cashout'] / 100)['toFixed'](2)),
    1e6 == game_data['cashout'] && $('.cashout-amount')['val']('\u221E'),
      update_button(),
      gameCanvas['im_in_game'] = !0
  ),
    game_data['players']['push']({
      uid: response['uid'],
      amount: response['amount'],
      name: response['name'],
      cashout: response['cashout']
    }),
    prepare_user_list();

}, game_finish = function (respnse) {
  for (i in user_data['uid'] == respnse['uid'] && (game_data['cashin'] = !1, gameCanvas['im_in_game'] = !1, update_button(), $('.history-container .table-body .crash-row')['length'] > 0 && ($('.history-container .table-body .crash-row')['first']()['children']('.h-col-2')['html']((respnse['current'] / 100)['toFixed'](2)), $('.history-container .table-body .crash-row')['first']()['children']('.h-col-4')['html'](chip_format_no_symbol(respnse['won'] - respnse['amount'])))), game_data['players']) {
    if (game_data['players'][i]['uid'] == respnse['uid']) {
      game_data['players']['splice'](i, 1);
      break
    }
  }
  ;
  game_data['winners']['push']({
    uid: respnse['uid'],
    amount: respnse['amount'],
    cashout: respnse['current'],
    won: respnse['won'],
    name: respnse['name']
  });

  prepare_user_list();

}, game_cancel = function (response) {
  for (i in user_data['uid'] == response['uid'] && (game_data['cashin'] = !1, gameCanvas['im_in_game'] = !1, update_button()), game_data['players']) {
    if (game_data['players'][i]['uid'] == response['uid']) {
      game_data['players']['splice'](i, 1);
      break
    }
  }
  ;
  prepare_user_list()

}, game_auth = function (response) {
  user_data['uid'] = response['uid'],
    user_data['name'] = response['name'],
    user_data['photo'] = response['photo'],
    // working with chips
    user_data['chips'] = response['chips'],
    user_data['uchips'] = response['chips'],
    user_data['credit'] = response['credit'],
    user_data['currency'] = response['currency'],
    user_data['admin'] = null != response['admin'] && response['admin'],
    $('.game-amount')['val'](chip_format_no_symbol(response['default_amount'])),
  '' != user_data['photo'] && (user_data['photo_image'] = new Image,
    user_data['photo_image']['onload'] = function () {
      $('.profile_photo')['attr']('src', user_data['photo'])
    },
    user_data['photo_image']['onerror'] = function () {
    },
    user_data['photo_image']['src'] = user_data['photo']),
    $('.user-name')['html'](user_data['name']),
    // Number Format Must Be There';
    $('.chips-amount')['html'](language['data']['cash'] + " " + short_chip_format(user_data['uchips'])),
    $('.credit-amount')['html'](language['data']['credit'] + " " + short_chip_format(user_data['credit'])),
    change_screen('lobby_screen');

}, game_status = function (response) {

  if (null != response['chips'] && (user_data['chips'] = response['chips'], $('.top_left_chips')['html'](short_chip_format(user_data['chips']))), gameCanvas['im_in_game'] = !1, fadein_screen('game_screen'), resize_screen(), 'waiting' == response['status']) {
    game_data['status'] = 'waiting', gameCanvas['setWaiting'](response['time'])
  } else {
    if ('started' == response['status']) {
      game_data['status'] = 'started', gameCanvas['setPlaying'](response['time'])
    } else {
      if ('busted' == response['status']) {
        game_data['status'] = 'busted';
        var data = (response['amount'] / 100)['toFixed'](2);
        gameCanvas['setBusted'](data, response['time'])
      }
    }
  }
  ;

  if (response['top_winners']) {
    for (i in gameCanvas['maximum_text'] = language['data']['crash_top_winners'], top_winners = response['top_winners']) {
      var _0x8341x10 = (top_winners[i]['cashout'] / 100)['toFixed'](2);
      0 == top_winners[i]['i'] && (gameCanvas['winner_text'] = short_chip_format(top_winners[i]['won']) + '  @' + _0x8341x10 + '  @' + top_winners[i]['name']), 1 == top_winners[i]['i'] && (gameCanvas['loser_text'] = short_chip_format(top_winners[i]['won']) + '  @' + _0x8341x10 + '  @' + top_winners[i]['name']), 2 == top_winners[i]['i'] && (gameCanvas['other_text'] = short_chip_format(top_winners[i]['won']) + '  @' + _0x8341x10 + '  @' + top_winners[i]['name'])
    }
  }
  ;

  $('.chat-container')['html'](''),
    $('.users-list-container')['html'](''),
    $('.history-container .table-body')['html']('');

  var chats = response['chats']['sort'](compareByTime);
  for (i in chats) {
    var html = '<div class="chat-row"><div><span>' + (msg = chats[i])['name'] + '</span></div><div class="txt">' + msg['text'] + '</div></div>';
    if (null != msg['uid'] && null != msg['admin']) {
      var msg_html = user_data['admin'] ? '<a href="javascript:;" class="mute-user-button" data="' + msg['uid'] + '" style="text-decoration: none; text-align: center; display:inline-block; background: red; color: #fff; font-weight: bold; width: 16px; height: 16px; border-radius: 8px; padding: 2px; margin: 4px;">x</a><span style="color: #000;"> Â  ' + msg['uid'] + ' Â  </span>' : '';
      html = '<div class="chat-row chat-uid-' + msg['uid'] + '"><div><span>' + msg_html + msg['name'] + '</span></div><div class="txt">' + msg['text'] + '</div></div>', 1 == msg['admin'] && (html = '<div class="chat-row chat-uid-' + msg['uid'] + '"><div><span>' + msg_html + msg['name'] + '</span></div><div class="txt" style="color: red; font-size: 14px;">' + msg['text'] + '</div></div>')
    }
    ;
    $('.chat-container')['append'](html)
  }
  ;
  $('.chat-container')['prop']('scrollTop', $('.chat-container')['prop']('scrollHeight')), init_mute_buttons();
  var _0x8341x14 = response['crashes']['sort'](compareByStart);
  for (i in _0x8341x14) {
    var _0x8341x15, _0x8341x16 = ((_0x8341x15 = _0x8341x14[i])['crash'] / 100)['toFixed'](2),
      _0x8341x17 = '<div class="crash-row"><div class="col bold h-col-1 ' + (_0x8341x16 >= 1.8 ? 'c-green' : 'c-red') + '">' + _0x8341x16 + '</div><div class="col h-col-2">-</div><div class="col h-col-3">-</div><div class="col h-col-4">-</div><div class="col h-col-5"><a href="javascript:;" class="show-code">' + _0x8341x15['md5'] + '</a></div><div class="col h-col-6"><a href="javascript:;" class="show-code">' + _0x8341x15['hash'] + '</a></div><div class="clear"></div></div>';
    $('.history-container .table-body')['prepend'](_0x8341x17)
  }
  ;
  if ('started' == response['status']) {
    if (0 == $('.crash-' + response['md5'])['length']) {
      _0x8341x17 = '<div class="crash-row crash-' + response['md5'] + '"><div class="col bold h-col-1">-</div><div class="col h-col-2">-</div><div class="col h-col-3">-</div><div class="col h-col-4">-</div><div class="col h-col-5"><a href="javascript:;" class="show-code">' + response['md5'] + '</a></div><div class="col h-col-6">-</div><div class="clear"></div></div>';
      $('.history-container .table-body')['prepend'](_0x8341x17)
    }
  } else {
    if ('waiting' == response['status'] && null != response['md5'] && 0 == $('.crash-' + response['md5'])['length']) {
      _0x8341x17 = '<div class="crash-row crash-' + response['md5'] + '"><div class="col bold h-col-1">-</div><div class="col h-col-2">-</div><div class="col h-col-3">-</div><div class="col h-col-4">-</div><div class="col h-col-5"><a href="javascript:;" class="show-code">' + response['md5'] + '</a></div><div class="col h-col-6">-</div><div class="clear"></div></div>';
      $('.history-container .table-body')['prepend'](_0x8341x17)
    }
  }
  ;

  show_codes(), update_button(), null != response['players'] && (game_data['players'] = response['players']), null != response['winners'] && (game_data['winners'] = response['winners']), prepare_user_list()

}, game_waiting = function (response) {
  if (game_data['status'] = 'waiting', gameCanvas['setWaiting'](response['time']), update_button(), game_data['players'] = [], game_data['winners'] = [], prepare_user_list(), game_data['autoplay']) {
    var data = $('.cashout-amount')['val']();
    '\u221E' == data ? data = 1e6 : (data = parseFloat($('.cashout-amount')['val']()), data = parseInt(100 * data));
    var _0x8341x10 = parseInt($('.game-amount')['val']()['split']('.')['join']('')['split'](',')['join'](''));
    /*
    socket_send({
        command: 'play',
        amount: 100 * _0x8341x10,
        cashout: data,
    });
*/
    socket_send({
      command: 'play',
      amount: _0x8341x10,
      cashout: data,
      from: user_data['from'],
    });
  }
  ;
  if (null != response['md5'] && 0 == $('.crash-' + response['md5'])['length']) {
    var html = '<div class="crash-row crash-' + response['md5'] + '"><div class="col bold h-col-1">-</div><div class="col h-col-2">-</div><div class="col h-col-3">-</div><div class="col h-col-4">-</div><div class="col h-col-5"><a href="javascript:;" class="show-code">' + response['md5'] + '</a></div><div class="col h-col-6">-</div><div class="clear"></div></div>';
    $('.history-container .table-body')['prepend'](html );

  }
  ;
  show_codes(), game_data['autoplay'] = !1, setTimeout(function () {
    update_button();
  }, 500);

}, game_started = function (response) {
  game_data['autoplay'] = !1, game_data['status'] = 'started', gameCanvas['setPlaying'](0), update_button();
  var info = '-';
  for (i in response['players']) {
    if (response['players'][i]['uid'] == user_data['uid']) {
      info = chip_format_no_symbol(response['players'][i]['amount']);
      break
    }
  }
  ;
  if (0 == $('.crash-' + response['md5'])['length']) {
    var html = '<div class="crash-row crash-' + response['md5'] + '"><div class="col bold h-col-1">-</div><div class="col h-col-2">-</div><div class="col h-col-3">' + info + '</div><div class="col h-col-4">-</div><div class="col h-col-5"><a href="javascript:;" class="show-code">' + response ['md5'] + '</a></div><div class="col h-col-6">-</div><div class="clear"></div></div>';
    $('.history-container .table-body')['prepend'](html)
  } else {
    $('.crash-' + response['md5'] + ' .h-col-3')['html'](info .toPrice())
  }
  ;
  show_codes(), $('.history-container .table-body .crash-row')['length'] > 150 && $('.history-container .table-body .crash-row')['last']()['remove'](), game_data['players'] = response['players'], prepare_user_list()
}, game_update = function (response) {
  game_data['status'] = 'started', gameCanvas['setPlaying'](response['time'])
}, game_busted = function (response) {
  game_data['status'] = 'busted', game_data['cashin'] = !1, gameCanvas['im_in_game'] = !1;
  var busted_rate = (response['amount'] / 100)['toFixed'](2);
  gameCanvas['setBusted'](busted_rate, response['time']), update_button(), prepare_user_list();
  var class_name = busted_rate >= 1.8 ? 'c-green' : 'c-red';
  $('.crash-' + response['md5'] + ' .h-col-1')['html'](busted_rate), $('.crash-' + response['md5'] + ' .h-col-1')['addClass'](class_name), $('.crash-' + response['md5'] + ' .h-col-6')['html']('<a href="javascript:;" class="show-code">' + response['hash'] + '</a>'), show_codes()
}, game_cash_out = function (response) {
  null != response['chips'] && (user_data['chips'] = response['chips'], $('.top_left_chips')['html'](short_chip_format(user_data['chips']))), fadein_screen('lobby_screen')
}, game_chips = function (response) {
  user_data['chips'] = response['chips'], $('.chips-amount')['html'](language['data']['cash'] + " " + short_chip_format(user_data['uchips']));
}, game_credit = function (response) {
  user_data['credit'] = response['credit'], $('.credit-amount')['html'](language['data']['credit'] + " " + short_chip_format(user_data['credit']));
}, game_chat = function (response) {
  $('.chat-container .chat-row')['length'] > 100 && $('.chat-container .chat-row')[0]['remove']();
  var data = '<div class="chat-row"><div><span>' + response['name'] + '</span></div><div class="txt">' + response['text'] + '</div></div>';
  if (null != response['uid'] && null != response['admin']) {
    var _0x8341x10 = user_data['admin'] ? '<a href="javascript:;" class="mute-user-button" data="' + response['uid'] + '" style="text-decoration: none; text-align: center; display:inline-block; background: red; color: #fff; font-weight: bold; width: 16px; height: 16px; border-radius: 8px; padding: 2px; margin: 4px;">x</a><span style="color: #000;"> Â  ' + response['uid'] + ' Â  </span>' : '';
    data = '<div class="chat-row chat-uid-' + response['uid'] + '"><div><span>' + _0x8341x10 + response['name'] + '</span></div><div class="txt">' + response['text'] + '</div></div>', 1 == response['admin'] && (data = '<div class="chat-row chat-uid-' + response['uid'] + '"><div><span>' + _0x8341x10 + response['name'] + '</span></div><div class="txt" style="color: red; font-size: 14px;">' + response['text'] + '</div></div>')
  }
  ;
  var _0x8341x11 = parseInt($('.chat-container')['prop']('scrollTop')) + parseInt($('.chat-panel .container')['height']()),
    _0x8341x18 = parseInt($('.chat-container')['prop']('scrollHeight'));
  $('.chat-container')['append'](data), _0x8341x11 > _0x8341x18 && $('.chat-container')['prop']('scrollTop', $('.chat-container')['prop']('scrollHeight')), init_mute_buttons()
}, game_mute = function (response) {
  $('.chat-uid-' + response['uid'])['remove'](), $('.chat-container')['prop']('scrollTop', $('.chat-container')['prop']('scrollHeight'))
}, game_top_winners = function (response) {
  for (i in gameCanvas['maximum_text'] = language['data']['crash_top_winners'], top_winners = response['top_winners']) {
    var data = (top_winners[i]['cashout'] / 100)['toFixed'](2);
    0 == top_winners[i]['i'] && (gameCanvas['winner_text'] = short_chip_format(top_winners[i]['won']) + '  @' + data + '  @' + top_winners[i]['name']), 1 == top_winners[i]['i'] && (gameCanvas['loser_text'] = short_chip_format(top_winners[i]['won']) + '  @' + data + '  @' + top_winners[i]['name']), 2 == top_winners[i]['i'] && (gameCanvas['other_text'] = short_chip_format(top_winners[i]['won']) + '  @' + data + '  @' + top_winners[i]['name'])
  }
}, game_error = function (response) {
  var msg = response['message'];
  null != language['data'][msg] && message(language['data'][msg])
}, game_broadcast = function (response) {
  message(response['message'])
}, game_last_win = function (response) {
  if ('game_screen' != active_screen) {
    return !1
  }
  ;
  if (response['uid'] == user_data['uid']) {
    return !1
  }
  ;
  if (response['currency'] != user_data['currency']) {
    return !1
  }
  ;
  var data = language['data']['last_winner']['replace']('{name}', response['name']);
  data = data['replace']('{amount}', full_chip_format_currency(response['amount'], response['currency'])), show_last_winner(data)
}, show_last_winner = function (response) {
  if (last_winners_bussy) {
    return last_winners['push'](response), !1
  }
  ;
  last_winners_bussy = !0, $('#last_winner')['html'](response);
  $('#last_winner')['css']({
    top: -100
  }), $('#last_winner')['show'](), $('#last_winner')['animate']({
    top: 0
  }, 500), setTimeout(function () {
    $('#last_winner')['animate']({
      top: -100
    }, 500)
  }, 2e3), setTimeout(function () {
    if (last_winners_bussy = !1, last_winners['length'] > 0) {
      var response = last_winners[0];
      last_winners['shift'](), show_last_winner(response)
    }
  }, 3e3)
}, compareByTime = function (response, data) {
  return response['time'] > data['time'] ? 1 : response['time'] < data['time'] ? -1 : 0
}, compareByStart = function (response, data) {
  return response['start'] > data['start'] ? 1 : response['start'] < data['start'] ? -1 : 0
}, compareByCashout = function (response, data) {
  if (response['cashout'] < data['cashout']) {
    return 1
  }
  ;
  if (response['cashout'] > data['cashout']) {
    return -1
  }
  ;
  if (null != response['amount'] && null != data['amount']) {
    if (response['amount'] < data['amount']) {
      return 1
    }
    ;
    if (response['amount'] > data['amount']) {
      return -1
    }
  }
  ;
  return 0
}, compareByAmount = function (response, data) {
  if (response['amount'] < data['amount']) {
    return 1
  }
  ;
  if (response['amount'] > data['amount']) {
    return -1
  }
  ;
  if (null != response['cashout'] && null != data['cashout']) {
    if (response['cashout'] < data['cashout']) {
      return 1
    }
    ;
    if (response['cashout'] > data['cashout']) {
      return -1
    }
  }
  ;
  return 0
}, init_mute_buttons = function () {
  $('.mute-user-button')['unbind']('click'), $('.mute-user-button')['click'](function () {
    var response = $(this)['attr']('data'),
      data = $(this)['parent']()['html']()['split']('</span>')[1],
      _0x8341x10 = $(this)['parent']()['parent']()['parent']()['find']('.txt')['html']();
    swal({
      title: '',
      text: '<font style=\'font-size:20px;\'><font style=\'font-weight: bold;\'>' + data + '</font> (' + response + ')<br>' + _0x8341x10 + '</font>',
      type: 'warning',
      showCancelButton: !0,
      confirmButtonColor: '#DD6B55',
      confirmButtonText: language['data']['okey'],
      cancelButtonText: language['data']['cancel'],
      closeOnConfirm: !0,
      html: !0,
      allowOutsideClick: !1,
      allowEscapeKey: !1,
      allowEnterKey: !1
    }, function (data) {
      data && socket_send({
        command: 'mute',
        uid: response
      })
    })
  })
}, show_codes = function () {
  $('.show-code')['unbind']('click'), $('.show-code')['click'](function () {
    prompt('', $(this)['html']())
  })
}, change_screen = function (response) {

  active_screen = response, $('.screen')['hide'](), $('#' + response)['show'](), calculate_screen_size(), 'game_screen' == response ? $('.background')['hide']() : $('.background')['show']()
}, fadein_screen = function (response) {
  active_screen = response, $('.screen')['hide'](), $('#' + response)['show'](), calculate_screen_size(), 'game_screen' == response ? $('.background')['hide']() : $('.background')['show']()
}, calculate_screen_size = function () {
  screen_size['width'] = $(window)['width'](), screen_size['height'] = $(window)['height']()
}, start_game = function (response) {
  setTimeout(function () {
    change_screen('loading_screen'), language = (new lang)['load'](function () {
      language['set_game'](), (game_assets = new game_assets_class)['load'](function () {
        response()
      })
    })
  }, 1e3)
}, createCookie = function (response, data) {
  var _0x8341x10 = new Date;
  _0x8341x10['setTime'](_0x8341x10['getTime']() + 2592e6);
  var _0x8341x11 = '; expires=' + _0x8341x10['toGMTString']();
  document['cookie'] = response + '=' + data + _0x8341x11 + '; path=/'
}, readCookie = function (name) {
  for (var data = name + '=', _0x8341x10 = document['cookie']['split'](';'), _0x8341x11 = 0; _0x8341x11 < _0x8341x10['length']; _0x8341x11++) {
    for (var _0x8341x18 = _0x8341x10[_0x8341x11];
         ' ' == _0x8341x18['charAt'](0);) {
      _0x8341x18 = _0x8341x18['substring'](1, _0x8341x18['length'])
    }
    ;
    if (0 == _0x8341x18['indexOf'](data)) {
      return _0x8341x18['substring'](data['length'], _0x8341x18['length'])
    }
  }
  ;
  return null
}, eraseCookie = function (response) {
  createCookie(response, '', -1)
}, apiRequest = function (url, data, callback) {

  var lang = readCookie('language');
  var uid = readCookie('uid');

  null != lang && null == data['language'] && (data['language'] = lang), data['lang'] = userLang, data['device'] = DEVICE_TYPE, data['game'] = 'crash', data['uid'] = uid, $['post'](API_URL + url + ".php", data)['done'](function (response) {

    if (null != callback) {
      var json = 'object' == typeof response ? response : JSON['parse'](response),
        result = null != json['result'] ? json['result'] : 'null';
      callback(result, json)
    }

  })['fail'](function (response, data, _0x8341x10) {
    top['location']['reload']()
  })
}, message = function (response) {
  var data = null != language && null != language['data'] && null != language['data']['okey'] ? language['data']['okey'] : 'OK';
  swal({
    title: '',
    text: '<font style=\'font-size:20px;\'>' + response + '</font>',
    confirmButtonText: data,
    html: !0
  })
};
var lang = function () {
    this['load'] = function (response) {
      var data = new Object;
      //            data['lang'] = userLang;
      var _0x8341x10 = readCookie('language');
      //			var _0x8341x10 = 'fa';

      return null != _0x8341x10 && (data['language'] = _0x8341x10), apiRequest('user/newGames/language', data, function (data, _0x8341x10) {
        null != _0x8341x10['data'] && (language['data'] = _0x8341x10['data']), null != response && response()
      }), this
    }, this['set_game'] = function () {
      $('.lang_31')['html'](this['data']['main_disconnect']), $('.lang_32')['html'](this['data']['main_connect_again']), $('.lang_46')['html'](this['data']['landscape']), $('.lang_57')['html'](this['data']['crash_play']), $('.lang_60')['html'](this['data']['crash_rules']), $('.lang_61')['html'](this['data']['crash_fair']), $('.lang_62')['html'](this['data']['crash_exit']), $('.lang_63')['html'](this['data']['crash_betpanel']), $('.lang_64')['html'](this['data']['crash_amount']), $('.lang_65')['html'](this['data']['crash_autocashout']), $('.lang_66')['html'](this['data']['crash_placebet']), $('.lang_67')['html'](this['data']['crash_history']), $('.lang_68')['html'](this['data']['crash_chat']), $('.lang_69')['html'](this['data']['crash_players']), $('.lang_70')['html'](this['data']['crash_user']), $('.lang_71')['html'](this['data']['crash_bet']), $('.lang_72')['html'](this['data']['crash_profit']), $('.lang_73')['html'](this['data']['crash_crash']), $('.lang_74')['html'](this['data']['crash_md5']), $('.lang_75')['html'](this['data']['crash_hash']), $('.lang_80')['html'](this['data']['currency']), gameCanvas['nextround_text'] = this['data']['crash_next'], gameCanvas['busted_title'] = this['data']['crash_busted'], null != this['data']['javascript'] && eval(this['data']['javascript'])
    }
  },
  game_assets_class = function () {
    this['assets'] = new Object, this['list'] = [], this['list']['push']({
      type: 'image',
      url: 'assets/back.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/button_red.png?'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/exit.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/home.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/lamp-light.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/lamp.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/landscape.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/placeholder.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/screen-light.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/screen.png'
    }), this['list']['push']({
      type: 'image',
      url: 'assets/zoomout.png'
    }), this['clean_name'] = function (response) {
      return response['split']('/')['join']('')['split']('.')['join']('')
    }, this['total_assets'] = this['list']['length'], this['load'] = function (response) {
      var data = 150 * (this['total_assets'] - this['list']['length']) / this['total_assets'];
      if ($('.loading_bar')['show'](), $('#loading_indicator')['width'](data), this['list']['length'] > 0) {
        var _0x8341x10 = this['list'][0]['url'],
          _0x8341x11 = this['list'][0]['type'];
        if (this['list']['shift'](), 'image' == _0x8341x11) {
          var _0x8341x18 = new Image;
          _0x8341x18['onload'] = function () {
            var data = game_assets['clean_name'](_0x8341x10);
            game_assets['assets'][data] = _0x8341x18, game_assets['load'](response)
          }, _0x8341x18['onerror'] = function () {
            game_assets['load'](response)
          }, null != ADDITIONAL_FILES[_0x8341x10] ? _0x8341x18['src'] = ADDITIONAL_FILES[_0x8341x10] : _0x8341x18['src'] = GAME_FOLDER + _0x8341x10
        } else {
          if ('sound' == _0x8341x11) {
            var _0x8341x12 = new Audio;
            _0x8341x12['onloadeddata'] = function () {
              var data = game_assets['clean_name'](_0x8341x10);
              game_assets['assets'][data] = _0x8341x12, game_assets['load'](response)
            }, _0x8341x12['onerror'] = function () {
              game_assets['load'](response)
            }, _0x8341x12['src'] = GAME_FOLDER + _0x8341x10
          }
        }
        ;
        return !1
      }
      ;
      $('.loading_bar')['hide'](), response()
    }, this['get'] = function (response) {
      if (response['length'] < 7) {
        return null
      }
      ;
      if ('assets' != response['substr'](0, 6)) {
        return null
      }
      ;
      var data = this['clean_name'](response);
      return null != this['assets'][data] ? this['assets'][data] : null
    }
  };
full_chip_format_currency = function (amount, data) {
  return (amount / 100)['formatMoney'](MONEY_FORMAT[0], MONEY_FORMAT[1], MONEY_FORMAT[2]) + ' ' + language['data']['currency']
}, full_chip_format = function (amount) {
  // return (amount / 100)['formatMoney'](MONEY_FORMAT[0], MONEY_FORMAT[1], MONEY_FORMAT[2]) + ' ' + language['data']['currency'];
  return amount + ' ' + language['data']['currency'];
}, short_chip_format = function (amount) {
  //return (amount / 100)['formatMoney'](0, MONEY_FORMAT[1], MONEY_FORMAT[2]) + ' ' + language['data']['currency'];
  return amount + ' ' + language['data']['currency'];
}, chip_format_no_symbol = function (amount) {
  //return (amount / 100)['formatMoney'](MONEY_FORMAT[0], MONEY_FORMAT[1], MONEY_FORMAT[2]);
  return amount;
}, chip_format_no_symbol_no_dot = function (amount) {
  //return (amount / 100)['formatMoney'](0, MONEY_FORMAT[1], MONEY_FORMAT[2]);
  return amount;
}, amount_format = function (amount) {
  //return parseInt(amount)['formatMoney'](MONEY_FORMAT[0], MONEY_FORMAT[1], MONEY_FORMAT[2]);
  return parseInt(amount);
}, Number['prototype']['formatMoney'] = function (response, data, _0x8341x10) {
  var _0x8341x11 = this,
    _0x8341x18 = (response = isNaN(response = Math['abs'](response)) ? 2 : response, data = null == data ? '.' : data, _0x8341x10 = null == _0x8341x10 ? ',' : _0x8341x10, _0x8341x11 < 0 ? '-' : ''),
    _0x8341x12 = parseInt(_0x8341x11 = Math['abs'](+_0x8341x11 || 0)['toFixed'](response)) + '',
    _0x8341x13 = (_0x8341x13 = _0x8341x12['length']) > 3 ? _0x8341x13 % 3 : 0;
  return _0x8341x18 + (_0x8341x13 ? _0x8341x12['substr'](0, _0x8341x13) + _0x8341x10 : '') + _0x8341x12['substr'](_0x8341x13)['replace'](/(\d{3})(?=\d)/g, '$1' + _0x8341x10) + (response ? data + Math['abs'](_0x8341x11 - _0x8341x12)['toFixed'](response)['slice'](2) : '')
}, play_audio = function (response) {
  if (1 == mute_audios) {
    return !1
  }
  ;
  var data;
  'ios' == DEVICE_TYPE ? null != (data = new Media(GAME_FOLDER + 'assets/sounds/' + response + '.mp3')) && (data['seekTo'](0), data['play']()) : null != (data = document['getElementById']('sound_' + response)) && 4 == data['readyState'] && (data['currentTime'] = 0, data['play']())
}, socket_connect = function (url, callback) {

  null != socket_connection && 1 == socket_connection['readyState'] && (socket_connection['close'](), socket_connection = null), (socket_connection = new WebSocket(url, 'onopen'))['onopen'] = function (response) {

    null != callback && callback(!0), callback = null

  }, socket_connection['onmessage'] = function (response) {

    var result = JSON['parse'](response['data']);
    data_from_socket(result);

  }, socket_connection['onclose'] = function (response) {

    fadein_screen('disconnect_screen')

  }, socket_connection['onerror'] = function (response) {

    null != callback && callback(!1), fadein_screen('disconnect_screen');

  }

}, socket_disconnect = function () {
  if (null == socket_connection || 1 != socket_connection['readyState']) {
    return !1
  }
  ;
  socket_connection['close']()
}, socket_send = function (socket) {
  return null != socket_connection && 1 == socket_connection['readyState'] && (socket_connection['send'](JSON['stringify'](socket)), !0)
}, connect_to_server = function (url) {
  socket_connect(url, function (response) {

    1 == response ? socket_send({
      command: 'auth',
      uid: user_data['uid'],
      token: user_data['token'],
      game_id: user_data['game_id'],
      from: user_data['from'],
    }) : fadein_screen('disconnect_screen')
  });

}, update_button = function () {
  $('.game-amount')['removeAttr']('disabled', 'disabled'),
    $('.cashout-amount')['removeAttr']('disabled', 'disabled'),
    $('.range-slide')['prop']('disabled', !1),
    $('.range-slide')['rangeslider']('update', !0),
    gameCanvas['cashin_amount'] = 0,

    'waiting' == game_data['status'] ? game_data['cashin'] ? ($('.place-bet')['removeClass']('place-bet-cashout'),
      $('.place-bet')['removeClass']('place-bet-passive'),
      $('.place-bet')['addClass']('place-bet-cancel'),
      $('.place-bet')['html'](language['data']['crash_cancel']),
      $('.game-amount')['attr']('disabled', 'disabled'),
      $('.cashout-amount')['attr']('disabled', 'disabled'),
      $('.range-slide')['prop']('disabled', !0),

      $('.range-slide')['rangeslider']('update', !0)) : ($('.place-bet')['removeClass']('place-bet-cashout'),
      $('.place-bet')['removeClass']('place-bet-passive'),
      $('.place-bet')['removeClass']('place-bet-cancel'),
      $('.place-bet')['html'](language['data']['crash_placebet'])) : 'started' == game_data['status'] && game_data['cashin'] ? (gameCanvas['cashin_amount'] = game_data['amount'],
      $('.place-bet')['removeClass']('place-bet-cancel'),
      $('.place-bet')['removeClass']('place-bet-passive'),
      $('.place-bet')['addClass']('place-bet-cashout'),
      $('.place-bet')['html'](language['data']['crash_cashout'] + '<br><span class=\'cashout-amount-text\'>0</span>'),
      $('.game-amount')['attr']('disabled', 'disabled'),
      $('.cashout-amount')['attr']('disabled', 'disabled'),
      $('.range-slide')['prop']('disabled', !0),
      $('.range-slide')['rangeslider']('update', !0)) : ($('.place-bet')['removeClass']('place-bet-cashout'), $('.place-bet')['removeClass']('place-bet-cancel'),
      $('.place-bet')['html'](language['data']['crash_placebet'])),

  game_data['autoplay'] && ($('.place-bet')['removeClass']('place-bet-cashout'),
    $('.place-bet')['removeClass']('place-bet-passive'),
    $('.place-bet')['addClass']('place-bet-cancel'),
    $('.place-bet')['html'](language['data']['crash_cancel'] + '<br><span style=\'font-size: 16px;\'>' + language['data']['crash_join_next'] + '</span>'),
    $('.game-amount')['attr']('disabled', 'disabled'),
    $('.cashout-amount')['attr']('disabled', 'disabled'),
    $('.range-slide')['prop']('disabled', !0),
    $('.range-slide')['rangeslider']('update', !0))

}, prepare_user_list = function () {
  var response = '';
  if ('waiting' == game_data['status']) {
    $('.status-red-bar')['attr']({
      style: 'width: 0%;'
    }), $('.status-green-bar')['attr']({
      style: 'width: 0%;'
    }), $('.status-yellow-bar')['attr']({
      style: 'width: 100%;'
    });
    var data = game_data['players']['sort'](compareByAmount);
    for (i in data) {
      response = response + '<div class="c-yellow"><div class="col col-1">' + (_0x8341x16 = data[i])['name'] + '</div><div class="col col-2">-</div><div class="col col-3">' + chip_format_no_symbol(_0x8341x16['amount'].toPrice()) + '</div><div class="col col-5">-</div><div class="clear"></div></div>'
    }
  } else {
    if ('started' == game_data['status']) {
      var _0x8341x10 = 100 - (_0x8341x15 = (0 == game_data['winners'].length + game_data['players'].length)) ? 0 : parseInt(100 * game_data['winners'].length / game_data['winners'].length + game_data['players'].length);
      $('.status-red-bar')['attr']({
        style: 'width: 0%;'
      }), $('.status-green-bar')['attr']({
        style: 'width: ' + _0x8341x15 + '%;'
      }), $('.status-yellow-bar')['attr']({
        style: 'width: ' + _0x8341x10 + '%;'
      });
      data = game_data['players']['sort'](compareByAmount);
      for (i in data) {
        response = response + '<div class="c-yellow"><div class="col col-1">' + (_0x8341x16 = data[i])['name'] + '</div><div class="col col-2">-</div><div class="col col-3">' + chip_format_no_symbol(_0x8341x16['amount'].toPrice()) + '</div><div class="col col-5">-</div><div class="clear"></div></div>'
      }
      ;
      var _0x8341x11 = game_data['winners']['sort'](compareByCashout);
      for (i in _0x8341x11) {
        response = response + '<div class="c-green"><div class="col col-1">' + (_0x8341x16 = _0x8341x11[i])['name'] + '</div><div class="col col-2">' + (_0x8341x16['cashout'] / 100)['toFixed'](2) + '</div><div class="col col-3">' + chip_format_no_symbol(_0x8341x16['amount'].toPrice()) + '</div><div class="col col-5">' + chip_format_no_symbol(_0x8341x16['won'] - _0x8341x16['amount']) + '</div><div class="clear"></div></div>'
      }
    } else {
      if ('busted' == game_data['status']) {
        var _0x8341x12, _0x8341x13, _0x8341x14,
          _0x8341x15 = 100 - (_0x8341x10 = 0 == (_0x8341x14 = (_0x8341x12 = game_data['winners']['length']) + (_0x8341x13 = game_data['players']['length'])) ? 0 : parseInt(100 * _0x8341x13 / _0x8341x14));
        $('.status-yellow-bar')['attr']({
          style: 'width: 0%;'
        }), $('.status-red-bar')['attr']({
          style: 'width: ' + _0x8341x10 + '%;'
        }), $('.status-green-bar')['attr']({
          style: 'width: ' + _0x8341x15 + '%;'
        });
        data = game_data['players']['sort'](compareByAmount);
        for (i in data) {
          response = response + '<div class="c-red"><div class="col col-1">' + (_0x8341x16 = data[i])['name'] + '</div><div class="col col-2">-</div><div class="col col-3">' + chip_format_no_symbol(_0x8341x16['amount'].toPrice()) + '</div><div class="col col-5">-</div><div class="clear"></div></div>'
        }
        ;
        _0x8341x11 = game_data['winners']['sort'](compareByCashout);
        for (i in _0x8341x11) {
          var _0x8341x16;
          response = response + '<div class="c-green"><div class="col col-1">' + (_0x8341x16 = _0x8341x11[i])['name'] + '</div><div class="col col-2">' + (_0x8341x16['cashout'] / 100)['toFixed'](2) + '</div><div class="col col-3">' + chip_format_no_symbol(_0x8341x16['amount'].toPrice()) + '</div><div class="col col-5">' + chip_format_no_symbol(_0x8341x16['won'] - _0x8341x16['amount']) + '</div><div class="clear"></div></div>'
        }
      }
    }
  }
  ;
  $('.users-list-container')['html'](response)
};
var MAX_SLIDER_RANGE = 20,
  LAST_BUTTON_CLICK_TIME = 0;
$(document)['ready'](function () {
  function _0x8341x1d(response, data) {
    $('.cashout-amount-box')['removeClass']('error-box');
    var _0x8341x10 = parseFloat(data);
    $('.cashout-amount')['val'](_0x8341x10['toFixed'](2)), data >= MAX_SLIDER_RANGE && $('.cashout-amount')['val']('\u221E')
  }

  gameCanvas = new GameCanvas, gameCanvas['init']('graph', {
    width: 560,
    height: 350,
   
  }), start_game(function () {
    var code = getCookie('code');
    var game_id = getCookie('game');
    apiRequest('user/newGames/auth', {
      'code': code,
      'game_id': game_id
    }, function (_0x8341x1e, _0x8341x1f) {


      'ok' == _0x8341x1e ? (user_data['uid'] = _0x8341x1f['data']['uid'], user_data['game_id'] = _0x8341x1f['data']['game_id'], user_data['from'] = _0x8341x1f['data']['from'], user_data['token'] = _0x8341x1f['data']['token'], user_data['bets'] = _0x8341x1f['data']['bets'], null != _0x8341x1f['data']['javascript'] && eval(_0x8341x1f['data']['javascript']), connect_to_server(_0x8341x1f['data']['address'])) : fadein_screen('disconnect_screen')
    })
  }), $('.home_button')['click'](function () {
    top['location'] = HOME_URL
  }), $('.refresh_button')['click'](function () {
    top['location'] = MAIN_URL
  }), $('#play_button')['click'](function () {
    socket_send({
      command: 'cash_in',
      uid: user_data['uid'],
      token: user_data['token'],
      game_id: user_data['game_id'],
      from: user_data['from'],
    })
  }), $('.cashout-button')['click'](function () {
    // cashout
    socket_send({
      command: 'cash_out',
      uid: user_data['uid'],
      token: user_data['token'],
      game_id: user_data['game_id'],
    });
    window.location.href = "/";
  }), $('.game-amount')['click'](function () {
    $('.game-amount-box')['removeClass']('error-box')
  }), $('.cashout-amount')['click'](function () {
    $('.cashout-amount-box')['removeClass']('error-box')
  }), $('.game-amount')['keyup'](function () {
    $('.game-amount-box')['removeClass']('error-box');
    var response = $(this)['val']()['split']('.')['join']('')['split'](',')['join']('');
    if ('' == response) {
      return $('.game-amount')['val'](''), !1
    }
    ;
    $('.game-amount')['val'](amount_format(response))
  }), $('.cashout-amount')['keyup'](function () {
    $('.cashout-amount-box')['removeClass']('error-box');
    var response = $(this)['val']()['split'](',')['join']('.');
    $('.cashout-amount')['val'](response);
    var data = parseFloat(response);
    !isNaN(data) && isFinite(data) && (data > MAX_SLIDER_RANGE && (data = MAX_SLIDER_RANGE), data = data['toFixed'](2), $('.range-slide')['val'](data), $('.range-slide')['rangeslider']('update', !0))
  }), $('.range-slide')['rangeslider']({
    polyfill: !1,
    onInit: function () {
      _0x8341x1d($('.rangeslider__handle', this.$range)[0], this['value'])
    }
  })['on']('input', function (response) {
    _0x8341x1d($('.rangeslider__handle', response['target']['nextSibling'])[0], this['value'])
  }), $('.bustNow')['click'](function () {
    if ('started' == game_data['status'])
      socket_send({
        command: 'bust',
        uid: user_data['uid'],
        from: user_data['from'],
      });
  }), $('.place-bet')['click'](function () {
    if ((new Date)['getTime']() - LAST_BUTTON_CLICK_TIME > 400) {

      if (LAST_BUTTON_CLICK_TIME = (new Date)['getTime'](), 'waiting' == game_data['status']) {

        if (game_data['cashin']) {
          socket_send({
            command: 'cancel',
            from: user_data['from'],
          })
        } else {
          if ('\u221E' == (response = $('.cashout-amount')['val']())) {
            response = 1e6
          } else {
            if (response = parseFloat($('.cashout-amount')['val']()), isNaN(response) || !isFinite(response)) {
              return $('.cashout-amount-box')['addClass']('error-box'), !1
            }
            ;
            if ((response = parseInt(100 * response)) < 101) {
              return $('.cashout-amount-box')['addClass']('error-box'), !1
            }
          }
          ;

          if ((data = parseInt($('.game-amount')['val']()['split']('.')['join']('')['split'](',')['join'](''))) >= 1) {
            /*
            (_0x8341x10 = 100 * data) > user_data['chips'] ? $('.game-amount-box')['addClass']('error-box') : socket_send({
                command: 'play',
                amount: _0x8341x10,
                cashout: response,
  uid: user_data['uid'],
  token: user_data['token'],
  game_id: user_data['game_id'],
            })
*/
            (_0x8341x10 = data) > user_data['chips'] ? $('.game-amount-box')['addClass']('error-box') : socket_send({
              command: 'play',
              amount: _0x8341x10,
              cashout: response,
              uid: user_data['uid'],
              token: user_data['token'],
              game_id: user_data['game_id'],
              from: user_data['from'],
            })
          } else {
            $('.game-amount-box')['addClass']('error-box')
          }
        }
      } else {
        if ('started' == game_data['status'] && game_data['cashin']) {
          socket_send({
            command: 'finish',
            uid: user_data['uid'],
            token: user_data['token'],
            game_id: user_data['game_id'],
            from: user_data['from'],
          })
        } else {
          if (0 == game_data['cashin'] && ('started' == game_data['status'] || 'busted' == game_data['status'])) {
            if (game_data['autoplay']) {
              game_data['autoplay'] = !1, update_button()
            } else {
              var response, data, _0x8341x10;
              if ('\u221E' == (response = $('.cashout-amount')['val']())) {
                response = 1e6
              } else {
                if (response = parseFloat($('.cashout-amount')['val']()), isNaN(response) || !isFinite(response)) {
                  return $('.cashout-amount-box')['addClass']('error-box'), !1
                }
                ;
                if ((response = parseInt(100 * response)) < 101) {
                  return $('.cashout-amount-box')['addClass']('error-box'), !1
                }
              }
              ;

              if ((data = parseInt($('.game-amount')['val']()['split']('.')['join']('')['split'](',')['join'](''))) >= 1) {

                /*
                (_0x8341x10 = 100 * data) > user_data['chips'] ? $('.game-amount-box')['addClass']('error-box') : (game_data['autoplay'] = !0, update_button())
*/
                (_0x8341x10 = data) > user_data['chips'] ? $('.game-amount-box')['addClass']('error-box') : (game_data['autoplay'] = !0, update_button())

              } else {
                $('.game-amount-box')['addClass']('error-box')
              }
            }
          }
        }
      }


    }
  }), $('.chat-send')['click'](function () {
    var response = $('#chat-input-text')['val']();
    '' != response && ($('#chat-input-text')['val'](''), socket_send({
      command: 'chat',
      text: response,
      from: user_data['from'],
    }))
  }), $('.history-button')['click'](function () {
    $('.game-bottom .tab-container .tab-active')['removeClass']('tab-active'), $('.history-button')['addClass']('tab-active'), $('.game-bottom .other-panels .user-container')['hide'](), $('.game-bottom .chat-panel')['hide'](), $('.game-bottom .other-panels .history-container')['show'](), $('.game-bottom .other-panels')['show'](), $('.history-container .table-body')['prop']('scrollTop', 0)
  }), $('.chat-button')['click'](function () {
    $('.game-bottom .tab-container .tab-active')['removeClass']('tab-active'), $('.chat-button')['addClass']('tab-active'), $('.game-bottom .other-panels')['hide'](), $('.game-bottom .other-panels .user-container')['hide'](), $('.game-bottom .other-panels .history-container')['hide'](), $('.game-bottom .chat-panel')['show'](), $('.chat-container')['prop']('scrollTop', $('.chat-container')['prop']('scrollHeight'))
  }), $('.players-button')['click'](function () {
    $('.game-bottom .tab-container .tab-active')['removeClass']('tab-active'), $('.players-button')['addClass']('tab-active'), $('.game-bottom .other-panels .history-container')['hide'](), $('.game-bottom .chat-panel')['hide'](), $('.game-bottom .other-panels .user-container')['show'](), $('.game-bottom .other-panels')['show'](), $('.user-container .table-body')['prop']('scrollTop', 0)
  }), $('.make-double')['click'](function () {
    if (null == $('.game-amount')['attr']('disabled') || 'disabled' != $('.game-amount')['attr']('disabled')) {
      var response = parseInt($('.game-amount')['val']()['split']('.')['join']('')['split'](',')['join'](''));
      if (response >= 1) {
        var data = response * 2;
        data <= user_data['chips'] && $('.game-amount')['val'](chip_format_no_symbol(data))
      }
    }
  }), $(window)['resize'](function () {
    'lobby_screen' == active_screen && fadein_screen('lobby_screen'), 'game_screen' == active_screen && fadein_screen('game_screen'), resize_screen()
  })
});
var GameCanvas = function () {
  this['game_status'] = 0, this['start_time'] = 0, this['started_time'] = 0, this['time_passed'] = 0, this['current_amount'] = 0, this['texts'] = {
    maximum: 'Max profit: {amount} BTC',
    winner: 'Winner bonus: {amount} BTC',
    loser: 'Loser bonus: {amount} BTC'
  }, this['maximum_text'] = '', this['winner_text'] = '', this['loser_text'] = '', this['other_text'] = '', this['nextround_text'] = 'Next round in {time}s', this['busted_title'] = 'Busted', this['warning_text'] = null, this['busted_amount'] = 0, this['busted_text'] = null, this['time_part'] = null, this['amount_part'] = null, this['graph_part'] = null, this['canvas_size'] = null, this['coors'] = null, this['dark_style'] = !1, this['im_in_game'] = !1, this['cashin_amount'] = 0, this['setLanguage'] = function (response) {
    null != response['maximum'] && (this['texts']['maximum'] = response['maximum']), null != response['winner'] && (this['texts']['winner'] = response['winner']), null != response['loser'] && (this['texts']['loser'] = response['loser']), null != response['nextround'] && (this['nextround_text'] = response['nextround']), null != response['busted'] && (this['busted_title'] = response['busted'])
  }, this['setAmounts'] = function (response, data, _0x8341x10) {
    this['maximum_text'] = this['texts']['maximum']['replace']('{amount}', response), this['winner_text'] = this['texts']['winner']['replace']('{amount}', data), this['loser_text'] = this['texts']['loser']['replace']('{amount}', _0x8341x10)
  }, this['setWarning'] = function (response) {
    this['warning_text'] = response
  }, this['setWaiting'] = function (response) {
    this['warning_text'] = this['time_part'] = this['amount_part'] = this['graph_part'] = this['busted_text'] = null, this['game_status'] = 1, this['start_time'] = (new Date)['getTime']() + response, this['time_passed'] = 0, this['started_time'] = 0
  }, this['setPlaying'] = function (response) {
    this['warning_text'] = this['time_part'] = this['amount_part'] = this['graph_part'] = this['busted_text'] = null, this['game_status'] = 2, this['started_time'] = (new Date)['getTime']() - response, this['time_passed'] = response
  }, this['setBusted'] = function (response, data) {
    this['warning_text'] = this['time_part'] = this['amount_part'] = this['graph_part'] = this['busted_text'] = null, this['game_status'] = 3, this['busted_amount'] = response, this['started_time'] = (new Date)['getTime']() - data, this['time_passed'] = data
  }, this['init'] = function (response, data) {
    this['canvas'] = document['getElementById'](response), this['context'] = this['canvas']['getContext']('2d'), this['canvas_size'] = data, this['resize'](), this['rtimer'] = !0, window['requestAnimationFrame'](gameCanvas['render'])
  }, this['resize'] = function (response) {
    null != response && (this['canvas_size'] = response);
    var data = (window['devicePixelRatio'] || 1) / (this['context']['webkitBackingStorePixelRatio'] || this['context']['mozBackingStorePixelRatio'] || this['context']['msBackingStorePixelRatio'] || this['context']['oBackingStorePixelRatio'] || this['context']['backingStorePixelRatio'] || 1);
    this['canvas']['width'] = this['canvas_size']['width'] * data, this['canvas']['height'] = this['canvas_size']['height'] * data, this['canvas']['style']['width'] = this['canvas_size']['width'] + 'px', this['canvas']['style']['height'] = this['canvas_size']['height'] + 'px', this['context']['scale'](data, data), this['coors'] = null
  }, this['render'] = function () {
    if (!gameCanvas['rtimer']) {
      return !1
    }
    ;
    gameCanvas['context']['clearRect'](0, 0, gameCanvas['canvas_size']['width'], gameCanvas['canvas_size']['height']), gameCanvas['draw'](gameCanvas['context']), window['requestAnimationFrame'](gameCanvas['render'])
  }, this['draw'] = function (response) {
    if (null == this['coors']) {
      this['coors'] = {
        width: this['canvas_size']['width'],
        height: this['canvas_size']['height']
      };
      var data = nr(0.08 * this['canvas_size']['width']),
        _0x8341x10 = nr(this['canvas_size']['height'] - 0.07 * this['canvas_size']['height']);
      this['coors']['origin'] = {
        x: data,
        y: _0x8341x10
      };
      var _0x8341x11 = nr(0.1 * this['canvas_size']['height']),
        _0x8341x18 = nr((this['coors']['width'] + data) / 2),
        _0x8341x12 = nr(0.48 * this['coors']['height']),
        _0x8341x13 = nr(0.36 * this['coors']['height']),
        _0x8341x14 = nr(1.7 * _0x8341x11);
      this['coors']['info'] = {
        x: _0x8341x18,
        y: _0x8341x12,
        font: _0x8341x11,
        by: _0x8341x13,
        bh: _0x8341x14
      };
      var _0x8341x15 = nr(0.22 * this['canvas_size']['height']),
        _0x8341x16 = nr((this['coors']['width'] + data) / 2),
        _0x8341x17 = nr(0.41 * this['coors']['height']),
        _0x8341x21 = nr(0.65 * this['coors']['height']);
      this['coors']['busted'] = {
        x: _0x8341x16,
        y1: _0x8341x17,
        y2: _0x8341x21,
        font: _0x8341x15
      };
      var _0x8341x22 = nr(0.036 * this['canvas_size']['height']),
        _0x8341x23 = nr(1.6 * data),
        _0x8341x24 = nr(0.6 * data - _0x8341x22),
        _0x8341x25 = nr(_0x8341x24 + 1.5 * _0x8341x22),
        _0x8341x26 = nr(_0x8341x25 + 1.5 * _0x8341x22),
        _0x8341x27 = nr(_0x8341x26 + 1.5 * _0x8341x22);
      this['coors']['profit'] = {
        x: _0x8341x23,
        y1: _0x8341x24,
        y2: _0x8341x25,
        y3: _0x8341x26,
        y4: _0x8341x27,
        font: _0x8341x22
      };
      var _0x8341x28 = nr(this['canvas_size']['width'] - data),
        _0x8341x29 = nr(_0x8341x10),
        _0x8341x2a = nr(0.036 * this['canvas_size']['height']),
        _0x8341x2b = nr(data - 0.5 * _0x8341x2a),
        _0x8341x2c = nr(_0x8341x10 + 1.5 * _0x8341x2a),
        _0x8341x2d = nr(0.3 * _0x8341x2a),
        _0x8341x2e = nr(_0x8341x10 - 0.5 * _0x8341x2a),
        _0x8341x2f = nr(data + 0.5 * _0x8341x2a);
      this['coors']['axis'] = {
        x: _0x8341x28,
        y: _0x8341x29,
        font: _0x8341x2a,
        tx: _0x8341x2b,
        th: _0x8341x2d,
        ty: _0x8341x2c,
        lx: _0x8341x2f,
        ly: _0x8341x2e
      };
      var _0x8341x30 = nr(0.3 * this['canvas_size']['height']),
        _0x8341x31 = nr((this['coors']['width'] + data) / 2),
        _0x8341x32 = nr(0.56 * this['coors']['height']);
      this['coors']['amount'] = {
        x: _0x8341x31,
        y: _0x8341x32,
        font: _0x8341x30
      }
    }
    ;
    if (this['drawAxis'](response), this['drawMaximum'](response), this['drawAxisLabels'](response), 1 == this['game_status']) {
      this['drawWaiting'](response)
    } else {
      if (2 == this['game_status']) {
        if (this['drawGraph'](response), this['drawAmount'](response), 0 != this['cashin_amount']) {
          var _0x8341x33 = chip_format_no_symbol(parseInt(this['cashin_amount'] * this['price']));
          $('.cashout-amount-text')['html'](_0x8341x33.toPrice())
        }
      } else {
        3 == this['game_status'] && this['drawBusted'](response)
      }
    }
    ;
    null != this['warning_text'] && this['drawWarning'](response)
  }, this['drawAxis'] = function (response) {
    response['lineWidth'] = 1, response['strokeStyle'] = this['dark_style'] ? '#b0b3c1' : '#7f7f7f', response['beginPath'](), response['moveTo'](this['coors']['origin']['x'], 0), response['lineTo'](this['coors']['origin']['x'], this['coors']['origin']['y']), response['lineTo'](this['coors']['width'], this['coors']['origin']['y']), response['stroke'](), response['closePath']()
  }, this['drawMaximum'] = function (response) {
    response['fillStyle'] = this['dark_style'] ? '#b0b3c1' : '#555', response['textAlign'] = 'left', null != this['maximum_text'] && (response['font'] = this['coors']['profit']['font'] + 'px IRANSans', response['fillText'](this['maximum_text'], this['coors']['profit']['x'], this['coors']['profit']['y1'])), null != this['winner_text'] && (response['fillStyle'] = '#69ca5e', response['font'] = this['coors']['profit']['font'] + 'px IRANSans', response['fillText'](this['winner_text'], this['coors']['profit']['x'], this['coors']['profit']['y2'])), null != this['loser_text'] && (response['fillStyle'] = '#e27474', response['font'] = this['coors']['profit']['font'] + 'px IRANSans', response['fillText'](this['loser_text'], this['coors']['profit']['x'], this['coors']['profit']['y3'])), null != this['other_text'] && (response['fillStyle'] = '#6ca7d2', response['font'] = this['coors']['profit']['font'] + 'px IRANSans', response['fillText'](this['other_text'], this['coors']['profit']['x'], this['coors']['profit']['y4']))
  }, this['drawWaiting'] = function (response) {
    var data = (this['start_time'] - (new Date)['getTime']()) / 1e3;
    data = data <= 0 ? '0.0' : data['toFixed'](1), response['fillStyle'] = this['dark_style'] ? '#b0b3c1' : '#ccc', response['textAlign'] = 'center', response['font'] = this['coors']['info']['font'] + 'px IRANSans', response['fillText'](this['nextround_text']['replace']('{time}', data), this['coors']['info']['x'], this['coors']['info']['y'])
  }, this['drawAxisLabels'] = function (response) {
    2 == this['game_status'] && null == this['warning_text'] && (this['time_passed'] = (new Date)['getTime']() - this['started_time']), response['strokeStyle'] = this['dark_style'] ? '#fff' : '#000', response['fillStyle'] = this['dark_style'] ? '#b0b3c1' : '#000', response['textAlign'] = 'center', response['font'] = this['coors']['axis']['font'] + 'px IRANSans';
    var data = this['time_passed'] < 1e4 ? 10 : nr(this['time_passed'] / 1e3);
    if (null == this['time_part'] && (this['time_part'] = 2), data > 20 && data > 7 * this['time_part']) {
      for (2 == this['time_part'] && (this['time_part'] = 10); !(data < 3 * this['time_part']);) {
        this['time_part'] += 10
      }
    }
    ;
    for (response['beginPath'](), i = 0; i < Math['ceil'](data / this['time_part']); i++) {
      var _0x8341x10 = this['time_part'] * i * 1e3,
        _0x8341x11 = this['coors']['origin']['x'] + this['coors']['axis']['x'] * _0x8341x10 / (this['time_passed'] < 1e4 ? 1e4 : this['time_passed']);
      response['fillText'](this['time_part'] * i, _0x8341x11, this['coors']['axis']['ty']), i > 0 && (response['moveTo'](_0x8341x11, this['coors']['origin']['y']), response['lineTo'](_0x8341x11, this['coors']['axis']['ly']))
    }
    ;
    response['stroke'](), response['closePath'](), response['textAlign'] = 'right', this['current_amount'] = Math['pow'](Math.E, 6e-5 * this['time_passed'])['toFixed'](2);
    var _0x8341x12 = nr(100 * this['current_amount']) - 100,
      _0x8341x13 = _0x8341x12 < 100 ? 100 : _0x8341x12;
    if (null == this['amount_part'] && (this['amount_part'] = 20), _0x8341x13 > 150 && _0x8341x13 > 6 * this['amount_part']) {
      for (this['amount_part'] = 100; !(_0x8341x13 <= 6 * this['amount_part']);) {
        this['amount_part'] *= 2
      }
    }
    ;
    for (response['beginPath'](), i = 0; i < Math['ceil'](_0x8341x13 / this['amount_part']); i++) {
      if (0 != i) {
        var _0x8341x14 = this['coors']['origin']['y'] - this['coors']['axis']['y'] * this['amount_part'] * i / (_0x8341x12 < 100 ? 100 : _0x8341x12),
          _0x8341x15 = (this['amount_part'] * i + 100) / 100 + 'x';
        response['fillText'](_0x8341x15, this['coors']['axis']['tx'], _0x8341x14 + this['coors']['axis']['th']), response['moveTo'](this['coors']['origin']['x'], _0x8341x14), response['lineTo'](this['coors']['axis']['lx'], _0x8341x14)
      }
    }
    ;
    response['stroke'](), response['closePath']()
  }, this['drawGraph'] = function (response) {
    for (response['strokeStyle'] = this['im_in_game'] ? '#408609' : '#c3b407', response['lineWidth'] = 4, response['beginPath'](), response['moveTo'](this['coors']['origin']['x'], this['coors']['origin']['y']), null == this['graph_part'] && (this['graph_part'] = 100), this['time_passed'] > 100 * this['graph_part'] && (this['graph_part'] *= 2), i = 0; i < this['time_passed']; i += this['graph_part']) {
      var data = this['coors']['origin']['x'] + this['coors']['axis']['x'] * i / (this['time_passed'] < 1e4 ? 1e4 : this['time_passed']),
        _0x8341x10 = this['coors']['origin']['y'] - this['coors']['axis']['y'] * (nr(100 * Math['pow'](Math.E, 6e-5 * i)) - 100) / (this['current_amount'] < 2 ? 100 : 100 * this['current_amount'] - 100);
      response['lineTo'](data, _0x8341x10)
    }
    ;
    response['stroke'](), response['closePath']()
  }, this['drawAmount'] = function (response) {

    var data = Math['pow'](Math.E, 6e-5 * this['time_passed'])['toFixed'](2);
    this['price'] = data, response['fillStyle'] = this['im_in_game'] ? '#408609' : this['dark_style'] ? '#b0b3c1' : 'black', response['textAlign'] = 'center', response['font'] = this['coors']['amount']['font'] + 'px IRANSans', response['fillText'](data + 'x', this['coors']['amount']['x'], this['coors']['amount']['y'])
  }, this['drawBusted'] = function (response) {
    null == this['busted_text'] && (this['busted_text'] = {
      line1: this['busted_title'],
      line2: '@ ' + this['busted_amount'] + 'x'
    }), response['fillStyle'] = 'red', response['textAlign'] = 'center', response['font'] = this['coors']['busted']['font'] + 'px IRANSans', response['fillText'](this['busted_text']['line1'], this['coors']['busted']['x'], this['coors']['busted']['y1']), response['fillText'](this['busted_text']['line2'], this['coors']['busted']['x'], this['coors']['busted']['y2'])
  }, this['drawWarning'] = function (response) {
    response['beginPath'](), response['fillStyle'] = 'rgba(0,0,0,0.4)', response['rect'](0, 0, this['coors']['width'], this['coors']['height']), response['fill'](), response['closePath'](), response['beginPath'](), response['fillStyle'] = 'red', response['rect'](0, this['coors']['info']['by'], this['coors']['width'], this['coors']['info']['bh']), response['fill'](), response['closePath'](), response['fillStyle'] = '#fff', response['textAlign'] = 'center', response['font'] = this['coors']['info']['font'] + 'px IRANSans', response['fillText'](this['warning_text'], this['coors']['info']['x'], this['coors']['info']['y'])
  }
};
nr = function (response) {
  return null == response ? response : 0.5 + response | 0
};
var gameCanvas = null;
resize_screen = function () {
  var response = nr($('#graph-container')['width']()),
    data = nr(response / 1.6);
  $('#graph')['css']({
    width: response,
    height: data
  }), null != gameCanvas && gameCanvas['resize']({
    width: response,
    height: data
  }), $('.game-controls')['height'](data + 13), $('.game-bottom')['css']({
    height: 'calc(100% - ' + (data + 72) + 'px)'
  })
}